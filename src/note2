public static int neighborCount(int[][] board, int i, int j)
{
    final int LAST_COL_INDEX = board[0].length - 1;
    final int LAST_ROW_INDEX = board.length - 1;

    int livingCount = 0;
  
    if(board[Math.max(i - 1, 0)][Math.max(j - 1, 0)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i - 1, 0)][Math.max(j, 0)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i - 1, 0)][Math.max(j + 1, LAST_COL_INDEX)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i, 0)][Math.max(j - 1, 0)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i, 0)][Math.max(j + 1, LAST_COL_INDEX)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i + 1, LAST_ROW_INDEX)][Math.max(j - 1, 0)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i + 1, LAST_ROW_INDEX)][Math.max(j, 0)] == 1)
    {
        livingCount++;
    }
    if(board[Math.max(i + 1, LAST_ROW_INDEX)][Math.max(j + 1, LAST_COL_INDEX)] == 1)
    {
        livingCount++;
    }

}

public static void gameOfLife(int[][] board)
{
    int[][] boardCopy = new int[board.length][board[0].length];
    
    for(int i = 0; i < board.length; i++)
    {
        for(int j= 0; j < board[0].length; j++)
        {
            boardCopy[i][j] = board[i][j];
        }
    }

    for(int i = 0; i < boardCopy.length; i++)
    {
        for(int j = 0; j < boardCopy[0].length; j++)
        {
            int neighbor = neighborCount(boardCopy, i, j);

            if(board[i][j] == 1 && (neighbor < 2 || neighbor > 3))
            {
                output[i - 1] = 0;
            }
            else if(board[i][j] == 1 && (neighbor == 2 || neighbor == 3))
            {
                output[i - 1] = 1;
            }
            else if(board[i][j] == 0 && neighbor == 3)
            {
                output[i - 1] = 1;
            }
        }
    }
}